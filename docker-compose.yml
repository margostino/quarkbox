version: '3.7'

services:

  wiremock:
    image: wiremock/wiremock:2.32.0
    container_name: wiremock
    profiles:
      - native
      - dev
    ports:
      - "10000:10000"
    command: "--verbose --port 10000"
    volumes:
      - ./wiremock:/home/wiremock

  quarkbox:
    image: quarkbox/quarkbox
    container_name: quarkbox
    profiles:
      - native
    ports:
      - "8080:8080"
    extra_hosts:
      - host.docker.internal:host-gateway
#    environment:
#      - QUARKUS_PROFILE=docker-runner
#    depends_on:
#      - dynamodb
#      - kafka
#    healthcheck:
#      test: ["CMD", "curl", "quarkbox:8080/ping | grep UP || exit 1"]
#      interval: 15s
#      timeout: 5s
#      retries: 20
#      start_period: 10s

#  toxiproxy:
#    image: shopify/toxiproxy
#    ports:
#      - "8474:8474"
#      - "35015-35050:35015-35050"
#    command: "-host=0.0.0.0 -config /toxiproxy.json"
#    volumes:
#      - ./docker-runner/resources/toxiproxy.json:/toxiproxy.json

  dynamodb:
    image: amazon/dynamodb-local
    container_name: dynamodb
    entrypoint: java -jar DynamoDBLocal.jar -inMemory -sharedDb
    ports:
      - "8000:8000"

  db-creator:
    image: amazon/aws-cli
    environment:
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=local
    command:
      - dynamodb
      - create-table
      - --table-name
      - quarkbox
      - --endpoint
      - http://dynamodb:8000
      - --key-schema
      - AttributeName=session_id,KeyType=HASH
      - --attribute-definitions
      - AttributeName=session_id,AttributeType=S
      - --provisioned-throughput
      - ReadCapacityUnits=100,WriteCapacityUnits=100
      - --stream-specification
      - StreamEnabled=true,StreamViewType=NEW_IMAGE
      - --region
      - local
    links:
      - dynamodb

  zookeeper:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    container_name: zookeeper
    profiles:
      - native
      - dev
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    command: [
        "sh", "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]

  kafka:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    container_name: kafka
    hostname: kafka
    profiles:
      - native
      - dev
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    command: [
        "sh", "-c",
        "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    environment:
      LOG_DIR: "/tmp/logs"
      #      KAFKA_ADVERTISED_HOST_NAME: kafka
      #      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      #      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
      #      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      #      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'